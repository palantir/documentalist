//- Mixins for Documentalist's own docs

- var isArray = (arr) => arr != null && arr.length > 0

//- renders a `contents` array of strings or tags
mixin joinContent(doc)
  if doc && doc.contents
    each block in doc.contents
      if typeof block === "string"
        | !{block}
      else
        +renderTag(block.tag, block.value)

mixin joinNames(names, joiner =", ")
  each name, i in names
    +linkify(name)
    if i < names.length - 1
      = joiner

//- split text into words and try to link each word to member of docs data
mixin linkify(text = "")
  each word in text.split(WORD_SEPARATORS)
    if typescript[word]
      a(href='#' + word)= word
    else
      = word
- WORD_SEPARATORS = /([\[\]<>() :.,]+)/g

//- renders an `@tag` from a (short) known list
mixin renderTag(tag, value)
  blockquote
    case tag
      when "interface"
        +interfaceDocs(typescript[value])
      default
        p #{tag}: #[code: +linkify(value)]

//- render a type signature, including default value & inherited from
mixin renderType(sig)
  .type-signature
    code
      +linkify(sig.type)
      if sig.defaultValue
        em= " = " + sig.defaultValue
    if sig.inheritedFrom
      small: em
        = "Inherited from "
        code: +linkify(sig.inheritedFrom)
  +joinContent(sig.documentation)

//- render docs for an interface (or class) member
mixin interfaceDocs(iface)
  .interface-block(id=iface.name)
    h2.interface-title
      code #[small= iface.kind] #{iface.name}
        if iface.extends
          small= " extends "
            +joinNames(iface.extends)
        if iface.implements
          small= " implements "
            +joinNames(iface.implements)
        small= " "
          a(href=iface.sourceUrl,target="_blank",title="View source") #


    if iface.kind === "type alias"
      .interface-properties
        table
          +propDocsRow(iface)
            +renderType(iface)
    else
      +joinContent(iface.documentation)

    if iface.constructorType
      h3 Constructor
      .interface-properties
        table
          each sig in iface.constructorType.signatures
            +propDocsRow(sig)
              +renderType(sig)

    if isArray(iface.members)
      h3 Members
      .interface-properties
        table
          each prop in iface.members
            +propDocsRow(prop)
              +renderType(prop)

    if isArray(iface.properties)
      h3 Properties
      .interface-properties
        table
          each prop in iface.properties
            +propDocsRow(prop)
              +renderType(prop)

    if isArray(iface.methods)
      h3 Methods
      .interface-properties
        table
          each prop in iface.methods
            +propDocsRow(prop)
              each sig in prop.signatures
                +renderType(sig)

mixin propDocsRow(prop)
  tr
    td.prop-name(valign="top")
      if prop.flags && prop.flags.isStatic
        code= "static "
      code= prop.name
    td.prop-type(valign="top")
      block
